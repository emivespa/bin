#!/bin/sh -e
#
# - download youtube video split by chapter

# Strict deps
command -v jq >/dev/null 2>&1 || exit 1
command -v yt-dlp >/dev/null 2>&1 || exit 1

# Util funcs
dateunix()
{
	awk 'BEGIN { print srand(); }'
}
t2hms()
{
	read -r t
	h="$((t / 3600))"
	m="$((t % 3600 / 60))"
	s="$((t % 60))"
	printf "%02d:%02d:%02d\n" "$h" "$m" "$s"
}

# Handle args:
#
# $1 is the URL.
# Unknown arguments are passed as yt-dlp flags (for the download, no the json dump).
url="$1"; shift
YTDLP_OPTS="--ignore-config --embed-thumbnail --geo-bypass --no-call-home"
YTDLP_OPTS_DL=""
while test "$#" -ne 0; do
	arg="$1"; shift
	case "$arg" in
		('--dir')
			if test -z "$1"; then
				exit 1
			fi
			dir="$1"; shift
			;;
		('--number-outputs')
			number_outputs=1
			;;
		(*)
			YTDLP_OPTS_DL="${YTDLP_OPTS_DL} ${arg}"
			;;
	esac
done

# Write video json dump to temp file
temp="${TMPDIR:-/tmp}/vidsplit-$(datex sort)-$(seed)"
on_exit()
{
	rm "$temp"
}
trap on_exit EXIT
yt-dlp $YTDLP_OPTS --dump-json "$url" | jq >"$temp"
# Create dir for files, cd into it and mv json dump from $temp to dir/dump.json
if test -z "$dir"; then
	dir="$(jq -r '.title' "$temp") [$(jq -r '.id' "$temp")].d" # Mimic yt-dlp video format.
fi
mkdir -p "$dir"
cd "$dir" || exit 1
cp "$temp" dump.json

chapters_length="$(jq -r '.chapters | length' dump.json)"
last_i="$(( chapters_length - 1))"
for i in $(seq 0 "$last_i"); do
	start_time="$(jq -r ".chapters[${i}].start_time" dump.json | t2hms)"
	end_time="$(jq -r ".chapters[${i}].end_time" dump.json | t2hms)"
	title="$(jq -r ".chapters[${i}].title" dump.json)"
	o="${title}"
	if test "$number_outputs" = '1'; then
		o="${i}"
	fi
	printf %s\\n "+=+=+=+=+=+=+=+ ${i} ${start_time} ${end_time} ${title}"
	yt-dlp  \
		$YTDLP_OPTS $YTDLP_OPTS_DL \
		-o "${o}.%(ext)s" \
		--download-sections "*$start_time-$end_time" \
		-- "$url"
done
