#!/bin/sh -eu
#
# - chatgpt cli/repl
#
# TODO: specify system prompt with flag.

type curl >/dev/null 2>&1 || exit 1
type jq >/dev/null 2>&1 || exit 1
type sponge >/dev/null 2>&1 || exit 1

d="/tmp/cgpt"; mkdir -p "$d"

skel='{
	"model": "gpt-3.5-turbo",
	"messages": []
}'

. "${HOME}/.env" # I use this as global dotenv.
if test -z "$OPENAI_API_KEY"; then
	printf %s\\n "error: no OPENAI_API_KEY in env" 2>&1
	exit 1
fi

pick_conversation()
{
	type fzf >/dev/null 2>&1 || exit 1
	find "$d" -type f | fzf --preview='cat {1}'
}

prompt()
{
	if test -p /dev/stdin; then
		cat -
	else
		if type rlwrap >/dev/null 2>&1; then
			rlwrap cat -
		else
			cat -
		fi
	fi
}

prompt2message()
{
	jq -Rns "{ \"role\": \"$1\", \"content\": input }"
}

append_message()
{
	jq --argjson message "$(cat -)" '.messages |= . + [$message]' "$f" |
		sponge "$f"
}

hit_api()
{
	curl -s "https://api.openai.com/v1/chat/completions" \
		-H "Authorization: Bearer ${OPENAI_API_KEY}" \
		-H "Content-Type: application/json" \
		-d @- <"$f"
}

response2message()
{
	jq '.choices[0].message'
}

print_last_message()
{
	jq -r '.messages | last | .content' <"$f"
}

filter_mode()
{
	prompt2message 'user' | append_message
	hit_api | response2message | append_message
	print_last_message
}

repl_mode()
{
	while true; do
		printf %s\\n "$(tput setaf 3)user:$(tput sgr0)"
		prompt | prompt2message 'user' | append_message
		printf %s\\n "$(tput setaf 2)assistant:$(tput sgr0)"
		hit_api | response2message | append_message
		print_last_message
	done
}

main()
{
	if ! test -t 0; then
		# Input is from stdin, run once:
		filter_mode
	else
		# Input is from a terminal, REPL mode:
		repl_mode
	fi
}

case "${1-''}" in
	('--edit') # Pick a conversation and edit it:
		f="$(pick_conversation)"
		${EDITOR:-nano} "$f"
		shift
		;;
	('--fork')
		f="${d}/$(date -u +'%Y%m%d%H%M%S').json"
		cp "$(pick_conversation)" "$f"
		shift
		;;
	('--last') # Pick last conversation:
		f="$(find "$d" -type f | tail -n1)"
		shift
		;;
	('--pick') # Pick an arbitrary conversation:
		f="$(pick_conversation)"
		shift
		;;
	('--syspick') # Pick from system prompt library:
		shift
		test "$#" -ne '0' && exit 1 # Don't accept other system prompts.
		f="${d}/$(date -u +'%Y%m%d%H%M%S').json"
		printf %s\\n "$skel" >"$f"
		find "${HOME}/src/github.com/emivespa/system-prompts" -type f |
			fzf --preview='cat {1}' | xargs cat |
			prompt2message 'system' | append_message
		;;
	(*) # Start with an empty conversation:
		f="${d}/$(date -u +'%Y%m%d%H%M%S').json"
		printf %s\\n "$skel" >"$f"
		;;
esac

if test "$#" -ne '0'; then
	echo "$*" | prompt2message 'system' | append_message
fi

main
